# -*- coding: utf-8 -*-
"""svmGLCMfitur.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13H7pSHmLdSUHT1kyYgPxqnydAZTigOdi
"""

#Import Library yang dibutuhkan
import pandas as pd #manipulasi data dan analisis data seperti excel
import numpy as np #operasi numerik dan array
import cv2 #Membaca, memanipulasi, dan menganalisis gambar.
import os #Mengimpor gambar, berinteraksi dengan sistem file.
import csv #Mengelola data dalam format CSV.

from google.colab import drive
drive.mount('/content/drive')

"""## Leaf Blight"""

from skimage.feature import graycomatrix, graycoprops

# Path ke folder gambar
path = '/content/drive/MyDrive/Colab Notebooks/Dataset/dataset/Bacterial Blight'
data = os.listdir(path)

# Inisialisasi list fitur
features = []
labels = []

# Threshold HSV daun
lower = np.array([59, 0, 180])
upper = np.array([135, 114, 255])

for image_name in data:
    image_path = os.path.join(path, image_name)
    image = cv2.imread(image_path)

    if image is None:
        print(f"Gagal membuka: {image_name}")
        continue

    # Resize ke 256x256
    image = cv2.resize(image, (256, 256))

    # --- Ekstraksi Fitur Tekstur (GLCM) ---
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    glcm = graycomatrix(gray, distances=[5], angles=[0], levels=256, symmetric=True, normed=True)
    contrast = graycoprops(glcm, 'contrast')[0, 0]
    homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]
    energy = graycoprops(glcm, 'energy')[0, 0]
    correlation = graycoprops(glcm, 'correlation')[0, 0]

    # --- Ekstraksi Fitur Warna HSV ---
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower, upper)
    masked_hsv = cv2.bitwise_and(hsv, hsv, mask=mask)

    h, s, v = cv2.split(masked_hsv)
    h_mean = np.mean(h[mask > 0])
    s_mean = np.mean(s[mask > 0])
    v_mean = np.mean(v[mask > 0])

    # Gabungkan fitur
    feature_row = [contrast, homogeneity, energy, correlation, h_mean, s_mean, v_mean]
    features.append(feature_row)
    labels.append(1)  # Ganti sesuai label kategori jika multiclass

# Simpan ke DataFrame
columns = ['Contrast', 'Homogeneity', 'Energy', 'Correlation', 'Hue_Mean', 'Saturation_Mean', 'Value_Mean']
feature_df = pd.DataFrame(features, columns=columns)
label_df = pd.DataFrame(labels, columns=['Label'])
final_df = pd.concat([feature_df, label_df], axis=1)

# Lihat hasil
print(final_df.head())

#INI BUAT DOWNLOAD FILE
from skimage.feature import graycomatrix, graycoprops
import cv2
import os
import numpy as np
import pandas as pd
import shutil
from google.colab import files

# ==== PERSIAPAN ====
# Folder input (gambar mentah)
input_path = '/content/drive/MyDrive/Colab Notebooks/Dataset/dataset/Bacterial Blight'
image_list = os.listdir(input_path)

# Folder output untuk gambar hasil
output_folder = '/content/processed_images'
os.makedirs(output_folder, exist_ok=True)

# ==== INISIALISASI ====
features = []
labels = []

# HSV threshold untuk masking daun
lower = np.array([25, 40, 40])
upper = np.array([90, 255, 255])

# ==== LOOP GAMBAR ====
for image_name in image_list:
    image_path = os.path.join(input_path, image_name)
    image = cv2.imread(image_path)

    if image is None:
        print(f"❌ Gagal membuka: {image_name}")
        continue

    # Resize ke 256x256
    image = cv2.resize(image, (256, 256))

    # --- GLCM Feature ---
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    glcm = graycomatrix(gray, distances=[5], angles=[0], levels=256, symmetric=True, normed=True)
    contrast = graycoprops(glcm, 'contrast')[0, 0]
    homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]
    energy = graycoprops(glcm, 'energy')[0, 0]
    correlation = graycoprops(glcm, 'correlation')[0, 0]

    # --- HSV Feature ---
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower, upper)
    masked_hsv = cv2.bitwise_and(hsv, hsv, mask=mask)

    # Hitung Mean HSV hanya dari bagian objek
    h, s, v = cv2.split(masked_hsv)
    h_mean = np.mean(h[mask > 0])
    s_mean = np.mean(s[mask > 0])
    v_mean = np.mean(v[mask > 0])

    # Gabungkan fitur
    feature_row = [contrast, homogeneity, energy, correlation, h_mean, s_mean, v_mean]
    features.append(feature_row)

    # Ganti label sesuai kebutuhan (sementara 1 untuk semua)
    labels.append(1)

    # --- Simpan Gambar yang Sudah Dimasking ---
    masked_rgb = cv2.cvtColor(masked_hsv, cv2.COLOR_HSV2BGR)
    save_path = os.path.join(output_folder, f'processed_{image_name}')
    cv2.imwrite(save_path, masked_rgb)

# ==== SIMPAN FITUR KE CSV ====
columns = ['Contrast', 'Homogeneity', 'Energy', 'Correlation', 'Hue_Mean', 'Saturation_Mean', 'Value_Mean']
df_features = pd.DataFrame(features, columns=columns)
df_labels = pd.DataFrame(labels, columns=['Label'])
final_df = pd.concat([df_features, df_labels], axis=1)


# ==== ZIP GAMBAR HASIL ====
zip_path = '/content/processed_images.zip'
shutil.make_archive('/content/processed_images', 'zip', output_folder)
print("✅ ZIP gambar berhasil dibuat:", zip_path)

# ==== DOWNLOAD FILE ====
files.download(zip_path)



"""## Leaf Smut"""

from skimage.feature import graycomatrix, graycoprops
import cv2
import os
import numpy as np
import pandas as pd

# Path ke folder gambar
path = '/content/drive/MyDrive/Colab Notebooks/Dataset/dataset/Leaf Smut'
data = os.listdir(path)

# Inisialisasi list fitur
features = []
labels = []

# Threshold HSV daun
lower = np.array([25, 40, 40])
upper = np.array([90, 255, 255])

for image_name in data:
    image_path = os.path.join(path, image_name)
    image = cv2.imread(image_path)

    if image is None:
        print(f"Gagal membuka: {image_name}")
        continue

    # Resize ke 256x256
    image = cv2.resize(image, (256, 256))

    # --- Ekstraksi Fitur Tekstur (GLCM) ---
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    glcm = graycomatrix(gray, distances=[5], angles=[0], levels=256, symmetric=True, normed=True)
    contrast = graycoprops(glcm, 'contrast')[0, 0]
    homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]
    energy = graycoprops(glcm, 'energy')[0, 0]
    correlation = graycoprops(glcm, 'correlation')[0, 0]

    # --- Ekstraksi Fitur Warna HSV ---
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower, upper)
    masked_hsv = cv2.bitwise_and(hsv, hsv, mask=mask)

    h, s, v = cv2.split(masked_hsv)
    h_mean = np.mean(h[mask > 0])
    s_mean = np.mean(s[mask > 0])
    v_mean = np.mean(v[mask > 0])

    # Gabungkan fitur
    feature_row = [contrast, homogeneity, energy, correlation, h_mean, s_mean, v_mean]
    features.append(feature_row)
    labels.append(2)  # Ganti sesuai label kategori jika multiclass

# Simpan ke DataFrame
columns = ['Contrast', 'Homogeneity', 'Energy', 'Correlation', 'Hue_Mean', 'Saturation_Mean', 'Value_Mean']
feature_df = pd.DataFrame(features, columns=columns)
label_df = pd.DataFrame(labels, columns=['Label'])
final_df2 = pd.concat([feature_df, label_df], axis=1)

# Lihat hasil
print(final_df2())



"""## Brown Spot"""

from skimage.feature import graycomatrix, graycoprops
import cv2
import os
import numpy as np
import pandas as pd

# Path ke folder gambar
path = '/content/drive/MyDrive/Colab Notebooks/Dataset/dataset/Brown Spot'
data = os.listdir(path)

# Inisialisasi list fitur
features = []
labels = []

# Threshold HSV daun
lower = np.array([25, 40, 40])
upper = np.array([90, 255, 255])

for image_name in data:
    image_path = os.path.join(path, image_name)
    image = cv2.imread(image_path)

    if image is None:
        print(f"Gagal membuka: {image_name}")
        continue

    # Resize ke 256x256
    image = cv2.resize(image, (256, 256))

    # --- Ekstraksi Fitur Tekstur (GLCM) ---
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    glcm = graycomatrix(gray, distances=[5], angles=[0], levels=256, symmetric=True, normed=True)
    contrast = graycoprops(glcm, 'contrast')[0, 0]
    homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]
    energy = graycoprops(glcm, 'energy')[0, 0]
    correlation = graycoprops(glcm, 'correlation')[0, 0]

    # --- Ekstraksi Fitur Warna HSV ---
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower, upper)
    masked_hsv = cv2.bitwise_and(hsv, hsv, mask=mask)

    h, s, v = cv2.split(masked_hsv)
    h_mean = np.mean(h[mask > 0])
    s_mean = np.mean(s[mask > 0])
    v_mean = np.mean(v[mask > 0])

    # Gabungkan fitur
    feature_row = [contrast, homogeneity, energy, correlation, h_mean, s_mean, v_mean]
    features.append(feature_row)
    labels.append(3)  # Ganti sesuai label kategori jika multiclass

# Simpan ke DataFrame
columns = ['Contrast', 'Homogeneity', 'Energy', 'Correlation', 'Hue_Mean', 'Saturation_Mean', 'Value_Mean']
feature_df = pd.DataFrame(features, columns=columns)
label_df = pd.DataFrame(labels, columns=['Label'])
final_df3 = pd.concat([feature_df, label_df], axis=1)

# Lihat hasil
print(final_df3.head())



"""##Hispa"""

from skimage.feature import graycomatrix, graycoprops
import cv2
import os
import numpy as np
import pandas as pd

# Path ke folder gambar
path = '/content/drive/MyDrive/Colab Notebooks/Dataset/dataset/Hispa'
data = os.listdir(path)

# Inisialisasi list fitur
features = []
labels = []

# Threshold HSV daun
lower = np.array([25, 40, 40])
upper = np.array([90, 255, 255])

for image_name in data:
    image_path = os.path.join(path, image_name)
    image = cv2.imread(image_path)

    if image is None:
        print(f"Gagal membuka: {image_name}")
        continue

    # Resize ke 256x256
    image = cv2.resize(image, (256, 256))

    # --- Ekstraksi Fitur Tekstur (GLCM) ---
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    glcm = graycomatrix(gray, distances=[5], angles=[0], levels=256, symmetric=True, normed=True)
    contrast = graycoprops(glcm, 'contrast')[0, 0]
    homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]
    energy = graycoprops(glcm, 'energy')[0, 0]
    correlation = graycoprops(glcm, 'correlation')[0, 0]

    # --- Ekstraksi Fitur Warna HSV ---
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower, upper)
    masked_hsv = cv2.bitwise_and(hsv, hsv, mask=mask)

    h, s, v = cv2.split(masked_hsv)
    h_mean = np.mean(h[mask > 0])
    s_mean = np.mean(s[mask > 0])
    v_mean = np.mean(v[mask > 0])

    # Gabungkan fitur
    feature_row = [contrast, homogeneity, energy, correlation, h_mean, s_mean, v_mean]
    features.append(feature_row)
    labels.append(4)  # Ganti sesuai label kategori jika multiclass

# Simpan ke DataFrame
columns = ['Contrast', 'Homogeneity', 'Energy', 'Correlation', 'Hue_Mean', 'Saturation_Mean', 'Value_Mean']
feature_df = pd.DataFrame(features, columns=columns)
label_df = pd.DataFrame(labels, columns=['Label'])
final_df4 = pd.concat([feature_df, label_df], axis=1)

# Lihat hasil
print(final_df4.head())



"""## Blast

"""

from skimage.feature import graycomatrix, graycoprops
import cv2
import os
import numpy as np
import pandas as pd

# Path ke folder gambar
path = '/content/drive/MyDrive/Colab Notebooks/Dataset/dataset/Blast'
data = os.listdir(path)

# Inisialisasi list fitur
features = []
labels = []

# Threshold HSV daun
lower = np.array([25, 40, 40])
upper = np.array([90, 255, 255])

for image_name in data:
    image_path = os.path.join(path, image_name)
    image = cv2.imread(image_path)

    if image is None:
        print(f"Gagal membuka: {image_name}")
        continue

    # Resize ke 256x256
    image = cv2.resize(image, (256, 256))

    # --- Ekstraksi Fitur Tekstur (GLCM) ---
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    glcm = graycomatrix(gray, distances=[5], angles=[0], levels=256, symmetric=True, normed=True)
    contrast = graycoprops(glcm, 'contrast')[0, 0]
    homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]
    energy = graycoprops(glcm, 'energy')[0, 0]
    correlation = graycoprops(glcm, 'correlation')[0, 0]

    # --- Ekstraksi Fitur Warna HSV ---
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower, upper)
    masked_hsv = cv2.bitwise_and(hsv, hsv, mask=mask)

    h, s, v = cv2.split(masked_hsv)
    h_mean = np.mean(h[mask > 0])
    s_mean = np.mean(s[mask > 0])
    v_mean = np.mean(v[mask > 0])

    # Gabungkan fitur
    feature_row = [contrast, homogeneity, energy, correlation, h_mean, s_mean, v_mean]
    features.append(feature_row)
    labels.append(5)  # Ganti sesuai label kategori jika multiclass

# Simpan ke DataFrame
columns = ['Contrast', 'Homogeneity', 'Energy', 'Correlation', 'Hue_Mean', 'Saturation_Mean', 'Value_Mean']
feature_df = pd.DataFrame(features, columns=columns)
label_df = pd.DataFrame(labels, columns=['Label'])
final_df5 = pd.concat([feature_df, label_df], axis=1)

# Lihat hasil
print(final_df5.head())



listdata = [final_df, final_df2, final_df3,final_df4, final_df5 ]
total = pd.concat(listdata, ignore_index=True)
total.to_csv("klasifikasi_daun.csv", index=False)
total.to_excel('klasifikasi_daun.xlsx', index=False)

total.head()

# prompt: download file langsung

from google.colab import files
total.to_csv('klasifikasi_daun.csv', encoding = 'utf-8-sig')
files.download('klasifikasi_daun.csv')