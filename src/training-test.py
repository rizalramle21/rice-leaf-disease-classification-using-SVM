# -*- coding: utf-8 -*-
"""training-test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15fvnXcO2KVYK7vYPnOD-tB2zOW-ydGYy

##Load data
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('/content/klasifikasi_daun (35).csv')
data

data.info()

data = data.iloc[:, 1:]
data

# from sklearn.model_selection import StratifiedKFold, cross_val_score
from sklearn.svm import SVC
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import numpy as np
import pickle

# Buat pipeline yang berisi StandardScaler + SVC
model = make_pipeline(
    StandardScaler(),
    SVC(C=100, gamma=0.1)  # Gunakan hasil dari tuning
)

# data pandas
# split data training-testing
y = data['Label']
df_train, df_test = train_test_split(data, test_size=0.2, random_state=46, stratify=y)

# train model
model.fit(df_train.drop('Label', axis=1), df_train['Label'])

# evaluasi model
y_pred = model.predict(df_test.drop('Label', axis=1))
print(classification_report(df_test['Label'], y_pred))

# # simpan model
# with open("model_pandas.pkl", "wb") as model_file:
#     pickle.dump(model, model_file)

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

cm = confusion_matrix(df_test['Label'], y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

from sklearn.model_selection import StratifiedKFold, cross_val_score

# Tentukan fitur (X) dan label (y)
X = data.drop('Label', axis=1)
y = data['Label']

# Buat objek StratifiedKFold
# n_splits adalah jumlah fold, shuffle=True untuk mengacak data
kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=46)

# Lakukan cross-validation
# scoring='accuracy' menggunakan akurasi sebagai metrik evaluasi
cv_scores = cross_val_score(model, X, y, cv=kf, scoring='accuracy')

# Tampilkan hasil cross-validation
print(f"Cross-validation scores: {cv_scores}")
print(f"Mean cross-validation accuracy: {cv_scores.mean()}")
print(f"Standard deviation of cross-validation accuracy: {cv_scores.std()}")
